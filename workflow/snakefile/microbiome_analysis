# bracken command will fail until we run braken on bv-brc kraken db or switch to using the k2 default db with the bracken buld completed
import sys
#### running from service-script ####
pe_samples = glob_wildcards('staging/pe_reads/{sample}_{read_num}.fastq.gz').sample
se_samples = glob_wildcards("staging/se_reads/{sample}.fastq.gz").sample
samples = pe_samples+se_samples
msg = 'snakefile command recieved - MICROBOIME ANALYSIS. \n'
sys.stderr.write(msg)
configfile: "../workflow/snakefile/config.json"
#ruleorder: bracken_abundance_estimation > calculate_alpha_diversity > calculate_beta_diversity > generate_sample_krona_plots > generate_multisample_krona_plots > generate_sankey_plots > multisample_comp_table > multiqc > clean_up
print(len(samples))
rule_all_list = [
        expand('output/{sample}/{sample}_krona.html', sample=samples),
        expand('output/{sample}/{sample}_sankey.html', sample=samples),
        'output/multiqc_report.html',
        expand('clean_up/{sample}/{sample}_sankey_files', sample=samples),
        expand('output/{sample}/bracken_output/{sample}_bracken_output.txt', sample=samples),
        expand('output/{sample}/bracken_output/{sample}_alpha_diversity.csv', sample=samples),
        ]
## this needs to be able to have just 1 single end or just one paired end - I think paired end will come in with 2 always - maybe go a more complex if 
if len(se_samples) == 1 and len(pe_samples) == 0 or len(se_samples) == 0 and len(pe_samples) == 2:
    msg = "preforming analysis for only one sample - DOES NOT INCLUDE multisample_comparison.html, multisample_krona.html"
    sys.stderr.write(msg)
    ruleorder: bracken_abundance_estimation > calculate_alpha_diversity > calculate_beta_diversity > generate_sample_krona_plots > generate_sankey_plots >clean_up_single_sample_html_files > multiqc 
else:
    msg = "preforming analysis for multiple samples - INCLUDES multisample_comparison.html, multisample_krona.html"
    sys.stderr.write(msg)
    rule_all_list.append('output/multisample_comparison.html')
    rule_all_list.append('output/multisample_krona.html')
    rule_all_list.append('output/beta_diversity.csv')
    ruleorder: bracken_abundance_estimation > calculate_alpha_diversity > calculate_beta_diversity > generate_sample_krona_plots > generate_multisample_krona_plots > generate_sankey_plots > clean_up_single_sample_html_files > multisample_comp_table > clean_up_multisample_html_files > multiqc


rule all:
    input:
        rule_all_list

rule bracken_abundance_estimation:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    params:
        bracken_dir = 'output/{sample}/bracken_output',
        ave_read_length = '100',
        level_of_abundance_estimation = 's',
        read_threshold = '10'
    output:
        bracken_output = 'output/{sample}/bracken_output/{sample}_bracken_output.txt',
        bracken_report = 'output/{sample}/bracken_output/{sample}_bracken_report.txt'
    shell:
        '''
        mkdir -p {params.bracken_dir}

        /opt/patric-common/runtime/bin/est_abundance.py \
            -i {input.k2report} \
            -k /vol/patric3/metagenome_dbs/kraken2/database100mers.kmer_distrib \
            -o {output.bracken_output} \
            -l S \
            --out-report {output.bracken_report} \
            -t 10
        '''

rule calculate_alpha_diversity:
    input:
        bracken_output = 'output/{sample}/bracken_output/{sample}_bracken_output.txt',
    params:
        temp_alpha_diversity_csv = '{sample}_alpha_diversity_tmp.csv'
    output:
        alpha_diversity_csv = 'output/{sample}/bracken_output/{sample}_alpha_diversity.csv'
    shell:
        '''
        python /opt/patric-common/runtime/bin/alpha_diversity.py \
            -f {input.bracken_output} -a BP >> {output.alpha_diversity_csv}

        python /opt/patric-common/runtime/bin/alpha_diversity.py  \
            -f {input.bracken_output} -a Sh >> {output.alpha_diversity_csv}

        python /opt/patric-common/runtime/bin/alpha_diversity.py  \
            -f {input.bracken_output} -a F >> {output.alpha_diversity_csv}

        python /opt/patric-common/runtime/bin/alpha_diversity.py \
            -f {input.bracken_output} -a Si >> {output.alpha_diversity_csv}

        python /opt/patric-common/runtime/bin/alpha_diversity.py  \
            -f {input.bracken_output} -a ISi >> {output.alpha_diversity_csv}

        python ../workflow/scripts/alpha_stats_cleanup.py {input.bracken_output} {params.temp_alpha_diversity_csv}

        mv {wildcards.sample}_alpha_diversity_tmp.csv {output.alpha_diversity_csv}
        '''

rule calculate_beta_diversity:
    input:
        # using set so each sample appears only once 
        bracken_outputs = set(expand('output/{sample}/bracken_output/{sample}_bracken_output.txt', sample=samples))
    output:
        beta_diversity_csv = 'output/beta_diversity.csv'
    shell:
        '''
        /opt/patric-common/runtime/bin/beta_diversity.py \
        --input {input.bracken_outputs} \
        --type bracken \
        --level S \
        > {output.beta_diversity_csv}
        '''

rule generate_sample_krona_plots:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    output:
        k_text = 'output/{sample}/kraken_output/{sample}.b.krona.txt',
        krona_html = 'output/{sample}/{sample}_krona.html'
    shell:
        '''
        python {config[kreport2krona]} \
            --report-file {input.k2report} --output {output.k_text}

        {config[krona_ktImportText]} \
            {output.k_text} \
            -o {output.krona_html}
        '''

rule generate_multisample_krona_plots:
    input:
        k_text = set(expand('output/{sample}/kraken_output/{sample}.b.krona.txt', sample=samples))
    output:
        set_krona_plot = 'output/multisample_krona.html'
    shell:
        '''
        {config[krona_ktImportText]} \
            {input.k_text} \
            -o {output.set_krona_plot}
        '''

rule generate_sankey_plots:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt',
    output:
        sankey_plot = 'output/{sample}/{sample}_sankey.html'
    shell: 
        r'''
        ../workflow/scripts/sankey_plot_gen.R --input {input.k2report} --output {output.sankey_plot}
        '''

rule clean_up_single_sample_html_files:
    params:
        sankey_dir = 'output/{sample}/{sample}_sankey_files/',
        clean_up_dir = 'clean_up'
    output:
        cl_sankey_dir = directory('clean_up/{sample}/{sample}_sankey_files')
    shell:
        '''
        mkdir -p {params.clean_up_dir}
        mv {params.sankey_dir} {output.cl_sankey_dir}
        '''

rule multisample_comp_table:
    input:
        k_text = set(expand('output/{sample}/kraken_output/{sample}_k2_report.txt', sample=samples))
    params:
        output_dir = 'output/'
    output:
        multi_comp = 'output/multisample_comparison.html'
    shell:
        r'''
        ../workflow/scripts/pavian_multisample_comparsion.R --input "{input.txt}" --output_dir {params.output_dir}
        '''

rule clean_up_multisample_html_files:
    params:
        multisample_comp_dir = 'output/multisample_comparison_files'
    output:
        cl_multisample_comp_dir = directory('clean_up/multisample_comparison_files')
    shell:
        '''
        mv {params.multisample_comp_dir} {output.cl_multisample_comp_dir}
        '''

rule multiqc:
    input:
        multiqc_config = '../workflow/multiqc_config.yaml'
    params:
        landing_dir = 'output',
        multiqc_dir = 'output/multiqc_data/',
        clean_up_dir = 'clean_up'
    output:
        'output/multiqc_report.html',
        cl_multiqc_dir = directory('clean_up/multiqc_data')
    shell:
        '''
        {config[multiqc]} --version

        {config[multiqc]} . \
            -c {input.multiqc_config} \
            -o {params.landing_dir} --fullnames \
            --comment "This report contains information about the raw fastq files, host removed fastq files and kraken2 reports."
        
        mkdir -p {params.clean_up_dir}

        mv {params.multiqc_dir} {params.clean_up_dir}
        '''
