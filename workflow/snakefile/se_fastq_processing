import sys
#### running from service-script ####
samples = glob_wildcards("staging/se_reads/{sample}.fastq.gz").sample
msg = 'snakefile command recieved - SINGLE END FASTQ PROCESSING'
sys.stderr.write(msg)
configfile: "../workflow/snakefile/config.json"
# temp rule order
#ruleorder: fastqc_raw_reads > remove_host_dna > fastqc_on_host_removed_reads > classify_with_kraken
ruleorder: fastqc_raw_reads > temp_remove_host_dna > fastqc_on_host_removed_reads > classify_with_kraken

rule all:
    input:
        expand('output/{sample}/fastqc_results/raw_reads/raw_{sample}_fastqc.html', sample=samples),
        expand('output/{sample}/bowtie2_results/{sample}_host_removed.fastq.gz', sample=samples),
        expand('output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_fastqc.html', sample=samples),
        expand('output/{sample}/kraken_output/{sample}_k2_output.txt', sample=samples),

rule fastqc_raw_reads:
    input:
        raw_read = 'staging/se_reads/{sample}.fastq.gz',
    params:
        fastqc_dir = 'output/{sample}/fastqc_results/raw_reads',
        out = 'output'
    output:
        fastqc_html = 'output/{sample}/fastqc_results/raw_reads/raw_{sample}_fastqc.html',
        fastqc_zip = 'output/{sample}/fastqc_results/raw_reads/raw_{sample}_fastqc.zip'
    shell:
        '''
        mkdir -p {params.out}
        mkdir -p {params.fastqc_dir}

        {config[fastqc]} --version
        
        {config[fastqc]} {input.raw_read} \
        -o {params.fastqc_dir} -q

        mv {params.fastqc_dir}/{wildcards.sample}_fastqc.html {output.fastqc_html}
        mv {params.fastqc_dir}/{wildcards.sample}_fastqc.zip {output.fastqc_zip}
        '''

rule temp_remove_host_dna:
    input:
        raw_read = 'staging/se_reads/{sample}.fastq.gz',
    params:
        bowtie2_dir = 'output/{sample}/bowtie2_results',
        tmp_name = '{sample}_host_removed',
        fq_hr = 'output/{sample}/bowtie2_results/{sample}_host_removed.fastq',

    output:
        out_fq_hr = 'output/{sample}/bowtie2_results/{sample}_host_removed.fastq.gz'

    shell:
        '''
        mkdir -p bowtie2_dir
        # temp command until the indices are sorted out
        cp {input.raw_read} {output.out_fq_hr}
        {config[bowtie2]} --version
        {config[samtools]} --version
        {config[bedtools]} --version
        {config[gzip]} --version
        '''

rule remove_host_dna:
    input:
        raw_read = 'staging/se_reads/{sample}.fastq.gz',
    params:
        bowtie2_dir = 'output/{sample}/bowtie2_results',
        tmp_name = '{sample}_host_removed',
        fq_hr = 'output/{sample}/bowtie2_results/{sample}_host_removed.fastq',

    output:
        sam = 'output/{sample}/bowtie2_results/{sample}_mapped_and_unmapped.sam',
        bam = 'output/{sample}/bowtie2_results/{sample}_mapped_and_unmapped.bam',
        unmapped_bam = 'output/{sample}/bowtie2_results/{sample}_both_ends_unmapped.bam',
        sorted_bam = 'output/{sample}/bowtie2_results/{sample}_both_ends_unmapped_sorted.bam',
        # out_fq_hr = 'output/{sample}/bowtie2_results/{sample}_host_removed.fastq.gz'
    shell:
        '''
        mkdir -p bowtie2_dir
        {config[bowtie2]} --version
        {config[samtools]} --version
        {config[bedtools]} --version
        {config[gzip]} --version

        echo starting bowtie2......

        {config[bowtie2]} -p 12 -x /path/to/bowtie2/indices
            -U {input.raw_read} -S {output.sam}
        
        echo ending bowtie2......
        echo starting sam to bam......
        
        {config[samtools]} \
            view -bS {output.sam} \
            > {output.bam}

        echo stopping sam to bam......
        echo starting bam to unmapped bam......

        {config[samtools]} \
            view -b -f 12 -F 256 \
            {output.bam} \
            > {output.unmapped_bam}

        echo stopping bam to unmapped bam......
        echo starting unmapped bam to sorted bam......

        {config[samtools]} \
            sort \
            -n {output.unmapped_bam} \
            -o {output.sorted_bam}

       echo stopping unmapped bam to sorted bam......
       echo starting sorted bam to bam to fastq......

        {config[bedtools]} bamtofastq \
            -i {output.sorted_bam} \
            -fq {params.fq_hr}

       echo stopping sorted bam to bam to fastq......
       echo starting fastq to fastq.gz......

        {config[gzip]} {params.fq_hr}
        '''

rule fastqc_on_host_removed_reads:
    input:
        clean_read = 'output/{sample}/bowtie2_results/{sample}_host_removed.fastq.gz',
    params:
        fastqc_dir = 'output/{sample}/fastqc_results/host_removed_reads'
    output:
        fastqc_html = 'output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_fastqc.html',
        fastqc_zip = 'output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_fastqc.zip'
    shell:
        '''
        mkdir -p {params.fastqc_dir}

        {config[fastqc]} --version
        
        {config[fastqc]} {input.clean_read} \
        -o {params.fastqc_dir} -q
        '''

rule classify_with_kraken:
    input:
        clean_se = 'output/{sample}/bowtie2_results/{sample}_host_removed.fastq.gz'
    params:
        kraken_dir = 'output/{sample}/kraken_output'
    output:
        k2_output = 'output/{sample}/kraken_output/{sample}_k2_output.txt',
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    shell:
        '''
        mkdir -p {params.kraken_dir}

        {config[kraken2]} --db /vol/patric3/metagenome_dbs/kraken2 \
            --threads 8 \
            --minimum-hit-groups 3 \
            --report-minimizer-data \
            --memory-mapping \
            --report {output.k2report} \
            {input.clean_se} \
            --output {output.k2_output}
        '''