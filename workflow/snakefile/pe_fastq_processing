import sys
#### running from service-script ####
samples = glob_wildcards("staging/pe_reads/{sample}_R{read_num}.fastq.gz").sample
read_nums = glob_wildcards("staging/pe_reads/{sample}_R{read_num}.fastq.gz").read_num

msg = 'snakefile command recieved - PAIRED END FASTQ PROCESSING \n'
sys.stderr.write(msg)
configfile: "config.json"
database_path = config["params"]["database"]
ruleorder: fastqc_raw_reads > hisat2_remove_host_dna > fastqc_on_host_removed_reads > classify_with_kraken
host_genome = config["params"]["host_genome"]
rule_all_list = [
        expand('output/{sample}/fastqc_results/raw_reads/raw_{sample}_R{read_num}_fastqc.html', sample=samples, read_num=read_nums),
        expand('output/{sample}/kraken_output/{sample}_k2_output.txt', sample=samples),
        ]

host_dict = {"homo_sapiens": "GCF_000001405.39_GRCh38.p13_genomic",
    "mus_musculus": "GCF_000001635.26_GRCm38.p6_genomic",
    "rattus_norvegicus" : "GCF_000001895.5_Rnor_6.0_genomic",
    "caenorhabditis_elegans" : "GCF_000002985.6_WBcel235_genomic",
    "drosophila_melanogaster_strain" : "GCF_000001215.4_Release_6_plus_ISO1_MT_genomic",
    "danio_rerio_strain_tuebingen": "GCF_000002035.6_GRCz11_genomic",
    "gallus_gallus" : "GCF_000002315.6_GRCg6a_genomic",
    "macaca_mulatta" : "GCF_003339765.1_Mmul_10_genomic",
    "mustela_putorius_furo" : "GCF_000215625.1_MusPutFur1.0_genomic",
    "sus_scrofa" : "GCF_000003025.6_Sscrofa11.1_genomic"}


# setting rules according to host 
if host_genome == "no_host":
    ruleorder: fastqc_raw_reads > classify_with_kraken
    hisat_indices = None
    msg = 'No host selected. SHIPPING Hisat2 to remove host dna and fastqc on host removed reads'
else:
    # append to rule all list 
    rule_all_list.append(expand('output/{sample}/hisat2_results/{sample}_host_removed_R{read_num}.fastq.gz', sample=samples, read_num=read_nums)),
    rule_all_list.append(expand('output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_R{read_num}_fastqc.html', sample=samples, read_num=read_nums)),
    # update rule order
    ruleorder: fastqc_raw_reads > hisat2_remove_host_dna > fastqc_on_host_removed_reads > classify_with_kraken
    # select the correct indices
    hisat_indices = host_dict[host_genome]
    msg = f'Host genome {host_genome} selected. ADDING Hisat2 to remove host dna and fastqc on host removed reads'
sys.stderr.write(msg)


rule all:
    input:
        rule_all_list

rule fastqc_raw_reads:
    input:
        raw_read = 'staging/pe_reads/{sample}_R{read_num}.fastq.gz',
    params:
        fastqc_dir = 'output/{sample}/fastqc_results/raw_reads',
    output:
        fastqc_html = 'output/{sample}/fastqc_results/raw_reads/raw_{sample}_R{read_num}_fastqc.html',
        fastqc_zip = 'output/{sample}/fastqc_results/raw_reads/raw_{sample}_R{read_num}_fastqc.zip'
    threads: 4
    shell:
        '''
        mkdir -p {params.fastqc_dir}

        fastqc --version
        
        fastqc {input.raw_read} \
        -t {threads} \
        -o {params.fastqc_dir} -q

        echo {params.fastqc_dir}/{wildcards.sample}_{wildcards.read_num}_fastqc.html
        echo {wildcards.sample}
        echo {wildcards.read_num}

        mv {params.fastqc_dir}/{wildcards.sample}_R{wildcards.read_num}_fastqc.html {output.fastqc_html}
        mv {params.fastqc_dir}/{wildcards.sample}_R{wildcards.read_num}_fastqc.zip {output.fastqc_zip}
        '''

rule hisat2_remove_host_dna:
    input:
        r1 = 'staging/pe_reads/{sample}_R1.fastq.gz',
        r2 = 'staging/pe_reads/{sample}_R2.fastq.gz',
    params:
        hisat2_dir = 'output/{sample}/hisat2_results',
        tmp_name = '{sample}_host_removed',
        fq_r1 = '{sample}_host_removed.1',
        fq_r2 = '{sample}_host_removed.2',
        hisat_indices_filename = hisat_indices
    output:
        sam = 'output/{sample}/hisat2_results/{sample}_aligned_reads.sam',
        out_r1 = 'output/{sample}/hisat2_results/{sample}_host_removed_R1.fastq.gz',
        out_r2 = 'output/{sample}/hisat2_results/{sample}_host_removed_R2.fastq.gz',
    threads: 16
    shell:
        '''
        mkdir -p {params.hisat2_dir}

        hisat2 --version

        echo "starting hisat2......"

        hisat2 -x {params.hisat_indices_filename} \
            -1 {input.r1} \
            -2 {input.r2} \
            --un-conc-gz \
            {params.tmp_name} -S {output.sam} \
            --threads {threads}

        mv {params.fq_r1} {output.out_r1}
        mv {params.fq_r2} {output.out_r2}
        '''

rule fastqc_on_host_removed_reads:
    input:
        clean_read = 'output/{sample}/hisat2_results/{sample}_host_removed_R{read_num}.fastq.gz',
    params:
        fastqc_dir = 'output/{sample}/fastqc_results/host_removed_reads'
    output:
        fastqc_html = 'output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_R{read_num}_fastqc.html',
        fastqc_zip = 'output/{sample}/fastqc_results/host_removed_reads/{sample}_host_removed_R{read_num}_fastqc.zip'
    threads: 4
    shell:
        '''
        mkdir -p {params.fastqc_dir}

        fastqc --version
        
        fastqc {input.clean_read} \
        -t {threads} \
        -o {params.fastqc_dir} -q
        '''

rule classify_with_kraken:
    input:
        clean_r1 = 'output/{sample}/hisat2_results/{sample}_host_removed_R1.fastq.gz',
        clean_r2 = 'output/{sample}/hisat2_results/{sample}_host_removed_R2.fastq.gz'
    params:
        database = database_path,
        kraken_dir = 'output/{sample}/kraken_output'
    output:
        k2_output = 'output/{sample}/kraken_output/{sample}_k2_output.txt',
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    threads: 16
    shell:
        '''
        mkdir -p {params.kraken_dir}

        kraken2 --db {params.database} \
            --threads {threads} \
            --minimum-hit-groups 3 \
            --report-minimizer-data \
            --memory-mapping \
            --report {output.k2report} \
            --confidence 0.1 \
            --paired {input.clean_r1} {input.clean_r2} \
            --output {output.k2_output}
        '''
