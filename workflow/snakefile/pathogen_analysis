import sys
#### running from service-script ####
pe_samples = glob_wildcards('staging/pe_reads/{sample}_R{read_num}.fastq.gz').sample
se_samples = glob_wildcards("staging/se_reads/{sample}.fastq.gz").sample
samples = pe_samples+se_samples
msg = 'snakefile command recieved - PATHOGEN ANALYSIS \n'
sys.stderr.write(msg)
configfile: "../workflow/snakefile/config.json"
ruleorder: generate_sample_krona_plots > generate_set_krona_plots > generate_sankey_plots > multi_sample_comp_table > multiqc

rule all:
    input:
        expand('output/{sample}/{sample}_krona.html', sample=samples),
        'output/multi_sample_krona.html',
        expand('output/{sample}/{sample}_sankey.html', sample=samples),
        'output/multisample_comparison.html',
        'output/multiqc_report.html'

rule generate_sample_krona_plots:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt'
    output:
        k_text = 'output/{sample}/kraken_output/{sample}.b.krona.txt',
        krona_html = 'output/{sample}/{sample}_krona.html'
    shell:
        '''
        python {config[kreport2krona]} \
            --report-file {input.k2report} --output {output.k_text}

        {config[krona_ktImportText]} \
            {output.k_text} \
            -o {output.krona_html}
        '''

rule generate_set_krona_plots:
    input:
        k_text = set(expand('output/{sample}/kraken_output/{sample}.b.krona.txt', sample=samples))
    output:
        set_krona_plot = 'output/multi_sample_krona.html'
    shell:
        '''
        {config[krona_ktImportText]} \
            {input.k_text} \
            -o {output.set_krona_plot}
        '''

rule generate_sankey_plots:
    input:
        k2report = 'output/{sample}/kraken_output/{sample}_k2_report.txt',
    output:
        sankey_plot = 'output/{sample}/{sample}_sankey.html'
    shell: 
        r'''
        ../workflow/scripts/sankey_plot_gen.R --input {input.k2report} --output {output.sankey_plot}
        '''

rule multi_sample_comp_table:
    input:
        k_text = set(expand('output/{sample}/kraken_output/{sample}_k2_report.txt', sample=samples))
    params:
        output_dir = 'output/'
    output:
        multi_comp = 'output/multisample_comparison.html'
    shell:
        r'''
        ../workflow/scripts/pavian_multi_sample_comparsion.R --input "{input.k_text}" --output_dir {params.output_dir}
        '''
    
rule multiqc:
    input:
        multiqc_config = '../workflow/multiqc_config.yaml'
    params:
        landing_dir = 'output',
        tmp_report_dir = 'output/tmp_k2_reports/'
    output:
        'output/multiqc_report.html'
    shell:
        '''
        {config[multiqc]} --version

        {config[multiqc]} . \
            -c {input.multiqc_config} \
            -o {params.landing_dir} --fullnames \
            --comment "This report contains information about the raw fastq files, host removed fastq files and kraken2 reports."
        '''